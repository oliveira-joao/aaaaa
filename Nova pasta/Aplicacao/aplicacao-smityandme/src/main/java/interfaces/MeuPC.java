/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaces;

import com.github.britooo.looca.api.core.Looca;
import com.github.britooo.looca.api.group.discos.DiscosGroup;
import com.github.britooo.looca.api.group.memoria.Memoria;
import com.github.britooo.looca.api.group.processador.Processador;
import com.github.britooo.looca.api.group.processos.ProcessosGroup;
import com.github.britooo.looca.api.group.servicos.ServicosGroup;
import com.github.britooo.looca.api.group.sistema.Sistema;
import com.github.britooo.looca.api.group.temperatura.Temperatura;
import dominios.Computador;
import dominios.Funcionario;
import funcionamento.sistema.AprovacaoConexaoMysql;
import funcionamento.sistema.GeradorDeLog;
import java.awt.Color;
import java.io.IOException;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Locale;
import java.util.TimerTask;
import model.dao.LeituraHardwareDao;
import notificacao.Slack;
import org.json.JSONObject;
import oshi.SystemInfo;
import oshi.hardware.GlobalMemory;
import oshi.hardware.HardwareAbstractionLayer;
import oshi.hardware.PhysicalMemory;

/**
 *
 * @author Victor
 */
public class MeuPC extends javax.swing.JInternalFrame {

    private Looca looca = new Looca();
    private Sistema sistema = looca.getSistema();
    private Temperatura temperatura = looca.getTemperatura();
    private Memoria memoria = looca.getMemoria();
    private Processador processador = looca.getProcessador();
    private DiscosGroup discosGroup = looca.getGrupoDeDiscos();
    private ServicosGroup servicosGroup = looca.getGrupoDeServicos();
    private ProcessosGroup processosGroup = looca.getGrupoDeProcessos();
    private SystemInfo systemInfo = new SystemInfo();
    private HardwareAbstractionLayer hardware = systemInfo.getHardware();
    private GlobalMemory globalMemory = hardware.getMemory();
    private SystemInfo informacoesSistema = new SystemInfo();
    private List<PhysicalMemory> physicalMemories = globalMemory.getPhysicalMemory();
    private Thread novaThread;
    private Boolean monitorar = true;
    private LeituraHardwareDao leituraHardwareDao = new LeituraHardwareDao();
    private Integer porcentagemRamEmUsoInt = 0;
    private Double cpuEmUso = 0.0;
    private Double cpuEmUsoFormatada = 0.0;
    private Double ramEmUsoFormatada = 0.0;
    private Double discoEmUsoFormatado = 0.0;
    private Integer cpuEmUsoInt = 0;
    private Integer porcentagemDiscoEmUsoInt = 0;
    private Integer computador;
    private DecimalFormat df = new DecimalFormat("#.##");
    private GeradorDeLog geradorDeLog = new GeradorDeLog();
    private JSONObject json = new JSONObject();
    private Funcionario funcionarioUtilizando = new Funcionario();
    private String marcaPC;
    private String modeloPC;
    private Integer contadorModerado = 0;
    private Integer contadorCritico = 0;
    private Long tempoDeInicio = System.currentTimeMillis();
    private Double tempoDecorrido = 0.0;

    /**
     * Creates new form MeuPC
     *
     * @param computador
     * @param funcionarioLogado
     */
    public MeuPC(Computador computador, Funcionario funcionarioLogado) {
        geradorDeLog.adicionarLog("INFO", "Monitoramento do computador " + computador.getMarca() + " " + geradorDeLog.getSerialPC() + " iniciado");
        this.computador = computador.getIdComputador();
        marcaPC = computador.getMarca();
        modeloPC = computador.getModelo();
        funcionarioUtilizando.setIdFuncionario(funcionarioLogado.getIdFuncionario());
        funcionarioUtilizando.setNomeFuncionario(funcionarioLogado.getNomeFuncionario());
        funcionarioUtilizando.setLoginFuncionario(funcionarioLogado.getLoginFuncionario());
        funcionarioUtilizando.setSenhaFuncionario(funcionarioLogado.getSenhaFuncionario());
        funcionarioUtilizando.setEmailFuncionario(funcionarioLogado.getEmailFuncionario());
        funcionarioUtilizando.setTelefoneFuncionario(funcionarioLogado.getTelefoneFuncionario());
        if (funcionarioLogado.getPermissaoAdmin().equals("Administrador")) {
            funcionarioUtilizando.setPermissaoAdmin(1);
        } else {
            funcionarioUtilizando.setPermissaoAdmin(0);
        }
        funcionarioUtilizando.setEmpresa(funcionarioLogado.getEmpresa());
        funcionarioUtilizando.setTipoFuncionario(funcionarioLogado.getTipoFuncionario());
        initComponents();
        monitorarEmNovaThread();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMeuPc = new javax.swing.JPanel();
        pnlSistema = new javax.swing.JPanel();
        imgComputador = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblTituloSistema = new javax.swing.JLabel();
        lblTituloSistemaOperacional = new javax.swing.JLabel();
        lblTituloArquitetura = new javax.swing.JLabel();
        lblValorSistemaOperacional = new javax.swing.JLabel();
        lblValorArquitetura = new javax.swing.JLabel();
        pnlCpu = new javax.swing.JPanel();
        pgrCpu = new rojerusan.componentes.RSProgressCircle();
        jPanel3 = new javax.swing.JPanel();
        lblTituloCPU = new javax.swing.JLabel();
        lblTituloNomeCPU = new javax.swing.JLabel();
        lblTituloProcessosAtivos = new javax.swing.JLabel();
        lblValorProcessosAtivos = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lblValorNomeCPU = new javax.swing.JTextArea();
        pnlMemoria = new javax.swing.JPanel();
        pgrMemoria = new rojerusan.componentes.RSProgressCircle();
        jPanel5 = new javax.swing.JPanel();
        lblTituloMemoria = new javax.swing.JLabel();
        lblTituloTipoMemoria = new javax.swing.JLabel();
        lblTituloCapacidadeMemoria = new javax.swing.JLabel();
        lblValorTipoMemoria = new javax.swing.JLabel();
        lblValorCapacidadeMemoria = new javax.swing.JLabel();
        lblTituloInformacoesDaMaquina = new javax.swing.JLabel();
        pnlDisco = new javax.swing.JPanel();
        pgrDisco = new rojerusan.componentes.RSProgressCircle();
        jPanel4 = new javax.swing.JPanel();
        lblTituloDisco = new javax.swing.JLabel();
        lblTituloModeloDisco = new javax.swing.JLabel();
        lblTituloCapacidadeDisco = new javax.swing.JLabel();
        lblValorCapacidadeDisco = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lblValorModeloDisco = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(java.awt.Color.white);
        setMaximumSize(new java.awt.Dimension(933, 700));
        setMinimumSize(new java.awt.Dimension(933, 700));
        setNormalBounds(new java.awt.Rectangle(0, 0, 933, 700));
        setPreferredSize(new java.awt.Dimension(933, 700));

        pnlMeuPc.setBackground(new java.awt.Color(255, 255, 255));
        pnlMeuPc.setMaximumSize(new java.awt.Dimension(937, 677));
        pnlMeuPc.setMinimumSize(new java.awt.Dimension(937, 677));

        pnlSistema.setBackground(new java.awt.Color(255, 255, 255));
        pnlSistema.setMaximumSize(new java.awt.Dimension(420, 225));
        pnlSistema.setMinimumSize(new java.awt.Dimension(420, 225));
        pnlSistema.setRequestFocusEnabled(false);

        imgComputador.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/computador.png"))); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        lblTituloSistema.setFont(new java.awt.Font("Ebrima", 1, 24)); // NOI18N
        lblTituloSistema.setForeground(new java.awt.Color(67, 67, 67));
        lblTituloSistema.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTituloSistema.setText("SISTEMA");

        lblTituloSistemaOperacional.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        lblTituloSistemaOperacional.setForeground(new java.awt.Color(47, 104, 166));
        lblTituloSistemaOperacional.setText("Sistema Operacional:");

        lblTituloArquitetura.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        lblTituloArquitetura.setForeground(new java.awt.Color(47, 104, 166));
        lblTituloArquitetura.setText("Arquitetura:");

        lblValorSistemaOperacional.setFont(new java.awt.Font("Ebrima", 0, 12)); // NOI18N
        lblValorSistemaOperacional.setForeground(new java.awt.Color(67, 67, 67));
        lblValorSistemaOperacional.setText("[vazio]");

        lblValorArquitetura.setFont(new java.awt.Font("Ebrima", 0, 12)); // NOI18N
        lblValorArquitetura.setForeground(new java.awt.Color(67, 67, 67));
        lblValorArquitetura.setText("[vazio]");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblValorArquitetura)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lblValorSistemaOperacional, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTituloSistemaOperacional)
                            .addComponent(lblTituloArquitetura)
                            .addComponent(lblTituloSistema, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(58, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblTituloSistema)
                .addGap(5, 5, 5)
                .addComponent(lblTituloSistemaOperacional)
                .addGap(3, 3, 3)
                .addComponent(lblValorSistemaOperacional)
                .addGap(5, 5, 5)
                .addComponent(lblTituloArquitetura)
                .addGap(3, 3, 3)
                .addComponent(lblValorArquitetura)
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlSistemaLayout = new javax.swing.GroupLayout(pnlSistema);
        pnlSistema.setLayout(pnlSistemaLayout);
        pnlSistemaLayout.setHorizontalGroup(
            pnlSistemaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSistemaLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(imgComputador)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );
        pnlSistemaLayout.setVerticalGroup(
            pnlSistemaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSistemaLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(pnlSistemaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(imgComputador, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlCpu.setBackground(new java.awt.Color(255, 255, 255));
        pnlCpu.setMaximumSize(new java.awt.Dimension(420, 225));
        pnlCpu.setMinimumSize(new java.awt.Dimension(420, 225));
        pnlCpu.setPreferredSize(new java.awt.Dimension(420, 225));

        pgrCpu.setMaximumSize(new java.awt.Dimension(125, 125));
        pgrCpu.setMinimumSize(new java.awt.Dimension(125, 125));
        pgrCpu.setPreferredSize(new java.awt.Dimension(125, 125));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        lblTituloCPU.setFont(new java.awt.Font("Ebrima", 1, 24)); // NOI18N
        lblTituloCPU.setForeground(new java.awt.Color(67, 67, 67));
        lblTituloCPU.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTituloCPU.setText("CPU");

        lblTituloNomeCPU.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        lblTituloNomeCPU.setForeground(new java.awt.Color(47, 104, 166));
        lblTituloNomeCPU.setText("Nome:");

        lblTituloProcessosAtivos.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        lblTituloProcessosAtivos.setForeground(new java.awt.Color(47, 104, 166));
        lblTituloProcessosAtivos.setText("Processos ativos:");

        lblValorProcessosAtivos.setFont(new java.awt.Font("Ebrima", 0, 12)); // NOI18N
        lblValorProcessosAtivos.setForeground(new java.awt.Color(67, 67, 67));
        lblValorProcessosAtivos.setText("[vazio]");

        lblValorNomeCPU.setEditable(false);
        lblValorNomeCPU.setColumns(20);
        lblValorNomeCPU.setFont(new java.awt.Font("Ebrima", 0, 12)); // NOI18N
        lblValorNomeCPU.setForeground(new java.awt.Color(67, 67, 67));
        lblValorNomeCPU.setLineWrap(true);
        lblValorNomeCPU.setRows(3);
        lblValorNomeCPU.setText("[vazio]");
        lblValorNomeCPU.setWrapStyleWord(true);
        lblValorNomeCPU.setMargin(new java.awt.Insets(0, 3, 2, 2));
        lblValorNomeCPU.setMaximumSize(new java.awt.Dimension(35, 34));
        lblValorNomeCPU.setMinimumSize(new java.awt.Dimension(35, 34));
        jScrollPane2.setViewportView(lblValorNomeCPU);
        jScrollPane2.setBorder(null);
        jScrollPane2.setVerticalScrollBarPolicy(jScrollPane1.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane2.setHorizontalScrollBarPolicy(jScrollPane1.HORIZONTAL_SCROLLBAR_NEVER);
        lblValorNomeCPU.setWrapStyleWord(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTituloNomeCPU)
                            .addComponent(lblValorProcessosAtivos)
                            .addComponent(lblTituloProcessosAtivos))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblTituloCPU)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(lblTituloCPU)
                .addGap(5, 5, 5)
                .addComponent(lblTituloNomeCPU)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(lblTituloProcessosAtivos)
                .addGap(3, 3, 3)
                .addComponent(lblValorProcessosAtivos)
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlCpuLayout = new javax.swing.GroupLayout(pnlCpu);
        pnlCpu.setLayout(pnlCpuLayout);
        pnlCpuLayout.setHorizontalGroup(
            pnlCpuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCpuLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(pgrCpu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );
        pnlCpuLayout.setVerticalGroup(
            pnlCpuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCpuLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(pnlCpuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pgrCpu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pnlMemoria.setBackground(new java.awt.Color(255, 255, 255));
        pnlMemoria.setMaximumSize(new java.awt.Dimension(420, 225));
        pnlMemoria.setMinimumSize(new java.awt.Dimension(420, 225));

        pgrMemoria.setMaximumSize(new java.awt.Dimension(125, 125));
        pgrMemoria.setMinimumSize(new java.awt.Dimension(125, 125));
        pgrMemoria.setPreferredSize(new java.awt.Dimension(125, 125));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        lblTituloMemoria.setFont(new java.awt.Font("Ebrima", 1, 24)); // NOI18N
        lblTituloMemoria.setForeground(new java.awt.Color(67, 67, 67));
        lblTituloMemoria.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTituloMemoria.setText("MEMÓRIA");

        lblTituloTipoMemoria.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        lblTituloTipoMemoria.setForeground(new java.awt.Color(47, 104, 166));
        lblTituloTipoMemoria.setText("Tipo:");

        lblTituloCapacidadeMemoria.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        lblTituloCapacidadeMemoria.setForeground(new java.awt.Color(47, 104, 166));
        lblTituloCapacidadeMemoria.setText("Capacidade total:");

        lblValorTipoMemoria.setFont(new java.awt.Font("Ebrima", 0, 12)); // NOI18N
        lblValorTipoMemoria.setForeground(new java.awt.Color(67, 67, 67));
        lblValorTipoMemoria.setText("[vazio]");

        lblValorCapacidadeMemoria.setFont(new java.awt.Font("Ebrima", 0, 12)); // NOI18N
        lblValorCapacidadeMemoria.setForeground(new java.awt.Color(67, 67, 67));
        lblValorCapacidadeMemoria.setText("[vazio]");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(lblValorTipoMemoria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(lblTituloCapacidadeMemoria)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTituloTipoMemoria)
                            .addComponent(lblValorCapacidadeMemoria)
                            .addComponent(lblTituloMemoria, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 82, Short.MAX_VALUE))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(lblTituloMemoria)
                .addGap(5, 5, 5)
                .addComponent(lblTituloTipoMemoria)
                .addGap(3, 3, 3)
                .addComponent(lblValorTipoMemoria)
                .addGap(13, 13, 13)
                .addComponent(lblTituloCapacidadeMemoria)
                .addGap(3, 3, 3)
                .addComponent(lblValorCapacidadeMemoria)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout pnlMemoriaLayout = new javax.swing.GroupLayout(pnlMemoria);
        pnlMemoria.setLayout(pnlMemoriaLayout);
        pnlMemoriaLayout.setHorizontalGroup(
            pnlMemoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMemoriaLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(pgrMemoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );
        pnlMemoriaLayout.setVerticalGroup(
            pnlMemoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMemoriaLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(pnlMemoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pgrMemoria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(50, 50, 50))
        );

        lblTituloInformacoesDaMaquina.setFont(new java.awt.Font("Ebrima", 1, 35)); // NOI18N
        lblTituloInformacoesDaMaquina.setForeground(new java.awt.Color(67, 67, 67));
        lblTituloInformacoesDaMaquina.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTituloInformacoesDaMaquina.setText("INFORMAÇÕES DA MÁQUINA");

        pnlDisco.setBackground(new java.awt.Color(255, 255, 255));
        pnlDisco.setMaximumSize(new java.awt.Dimension(420, 225));
        pnlDisco.setMinimumSize(new java.awt.Dimension(420, 225));
        pnlDisco.setPreferredSize(new java.awt.Dimension(420, 225));

        pgrDisco.setMaximumSize(new java.awt.Dimension(125, 125));
        pgrDisco.setMinimumSize(new java.awt.Dimension(125, 125));
        pgrDisco.setPreferredSize(new java.awt.Dimension(125, 125));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        lblTituloDisco.setFont(new java.awt.Font("Ebrima", 1, 24)); // NOI18N
        lblTituloDisco.setForeground(new java.awt.Color(67, 67, 67));
        lblTituloDisco.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTituloDisco.setText("DISCO");

        lblTituloModeloDisco.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        lblTituloModeloDisco.setForeground(new java.awt.Color(47, 104, 166));
        lblTituloModeloDisco.setText("Modelo:");

        lblTituloCapacidadeDisco.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        lblTituloCapacidadeDisco.setForeground(new java.awt.Color(47, 104, 166));
        lblTituloCapacidadeDisco.setText("Capacidade total:");

        lblValorCapacidadeDisco.setFont(new java.awt.Font("Ebrima", 0, 12)); // NOI18N
        lblValorCapacidadeDisco.setForeground(new java.awt.Color(67, 67, 67));
        lblValorCapacidadeDisco.setText("[vazio]");

        lblValorModeloDisco.setEditable(false);
        lblValorModeloDisco.setColumns(20);
        lblValorModeloDisco.setFont(new java.awt.Font("Ebrima", 0, 12)); // NOI18N
        lblValorModeloDisco.setForeground(new java.awt.Color(67, 67, 67));
        lblValorModeloDisco.setLineWrap(true);
        lblValorModeloDisco.setRows(3);
        lblValorModeloDisco.setText("[vazio]");
        lblValorModeloDisco.setWrapStyleWord(true);
        lblValorModeloDisco.setMargin(new java.awt.Insets(0, 3, 2, 2));
        lblValorModeloDisco.setMaximumSize(new java.awt.Dimension(35, 34));
        lblValorModeloDisco.setMinimumSize(new java.awt.Dimension(35, 34));
        jScrollPane1.setViewportView(lblValorModeloDisco);
        jScrollPane1.setBorder(null);
        jScrollPane1.setVerticalScrollBarPolicy(jScrollPane1.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setHorizontalScrollBarPolicy(jScrollPane1.HORIZONTAL_SCROLLBAR_NEVER);
        lblValorModeloDisco.setWrapStyleWord(true);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTituloDisco, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTituloModeloDisco)
                    .addComponent(lblTituloCapacidadeDisco)
                    .addComponent(lblValorCapacidadeDisco))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(lblTituloDisco)
                .addGap(5, 5, 5)
                .addComponent(lblTituloModeloDisco)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(lblTituloCapacidadeDisco)
                .addGap(3, 3, 3)
                .addComponent(lblValorCapacidadeDisco)
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlDiscoLayout = new javax.swing.GroupLayout(pnlDisco);
        pnlDisco.setLayout(pnlDiscoLayout);
        pnlDiscoLayout.setHorizontalGroup(
            pnlDiscoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDiscoLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(pgrDisco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlDiscoLayout.setVerticalGroup(
            pnlDiscoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDiscoLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(pnlDiscoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pgrDisco, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlMeuPcLayout = new javax.swing.GroupLayout(pnlMeuPc);
        pnlMeuPc.setLayout(pnlMeuPcLayout);
        pnlMeuPcLayout.setHorizontalGroup(
            pnlMeuPcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMeuPcLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMeuPcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTituloInformacoesDaMaquina, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlMeuPcLayout.createSequentialGroup()
                        .addGroup(pnlMeuPcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlMeuPcLayout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(pnlSistema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMeuPcLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(pnlDisco, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addGroup(pnlMeuPcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pnlCpu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pnlMemoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)))
                .addGap(35, 35, 35))
        );
        pnlMeuPcLayout.setVerticalGroup(
            pnlMeuPcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMeuPcLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(lblTituloInformacoesDaMaquina)
                .addGap(46, 46, 46)
                .addGroup(pnlMeuPcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlCpu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlSistema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlMeuPcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlMemoria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDisco, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE))
                .addContainerGap(68, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(pnlMeuPc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMeuPc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void monitorarPorcentagens() {
        df.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ENGLISH));
        Long ramTotal = memoria.getTotal();
        Long ramEmUso = memoria.getEmUso();
        Double porcentagemRamEmUso = (((double) ramEmUso / (double) ramTotal) * 100);
        ramEmUsoFormatada = Double.valueOf(df.format(porcentagemRamEmUso));
        porcentagemRamEmUsoInt = porcentagemRamEmUso.intValue();

        cpuEmUso = processador.getUso();
        cpuEmUsoFormatada = Double.valueOf(df.format(cpuEmUso));
        cpuEmUsoInt = cpuEmUso.intValue();

        Long tamanhoTotalDisco = discosGroup.getVolumes().get(0).getTotal();
        Long tamanhoDisponivelDisco = discosGroup.getVolumes().get(0).getDisponivel();
        Double porcentagemDiscoEmUso = ((double) tamanhoTotalDisco - (double) tamanhoDisponivelDisco) / (double) tamanhoTotalDisco * 100;
        discoEmUsoFormatado = Double.valueOf(df.format(porcentagemDiscoEmUso));
        porcentagemDiscoEmUsoInt = porcentagemDiscoEmUso.intValue();

        pgrMemoria.setValue(porcentagemRamEmUsoInt);
        pgrCpu.setValue(cpuEmUsoInt);
        pgrDisco.setValue(porcentagemDiscoEmUsoInt);

        if (pgrMemoria.getValue() < 45.0) {
            pgrMemoria.setForeground(Color.green);
        } else if (pgrMemoria.getValue() >= 45.0 && pgrMemoria.getValue() < 75.0) {
            pgrMemoria.setForeground(Color.orange);
        } else {
            pgrMemoria.setForeground(Color.red);
        }

        if (pgrCpu.getValue() < 45.0) {
            pgrCpu.setForeground(Color.green);
        } else if (pgrCpu.getValue() >= 45.0 && pgrCpu.getValue() < 75.0) {
            pgrCpu.setForeground(Color.orange);
        } else {
            pgrCpu.setForeground(Color.red);
        }

        if (pgrDisco.getValue() < 45.0) {
            pgrDisco.setForeground(Color.green);
        } else if (pgrDisco.getValue() >= 45.0 && pgrDisco.getValue() < 75.0) {
            pgrDisco.setForeground(Color.orange);
        } else {
            pgrDisco.setForeground(Color.red);
        }
    }

    private void monitorarCpu() {
        // Declaração de variáveis
        Integer numProcessosAtivos = processosGroup.getTotalProcessos();
        String nomeCpu = processador.getNome();

        // Inserção de variáveis nos elementos do Java Swing
        lblValorNomeCPU.setText(nomeCpu);
        lblValorProcessosAtivos.setText(numProcessosAtivos.toString());
    }

    private void monitorarDisco() {
        Double capacidadeTotalDisco = (double) ((discosGroup.getVolumes().get(0).getTotal()) / 1000000000);
        String modeloDisco = informacoesSistema.getHardware().getDiskStores().get(0).getModel();

        lblValorCapacidadeDisco.setText(String.format("%.0f GB", capacidadeTotalDisco));

        if (modeloDisco.contains("unknown")) {
            lblValorModeloDisco.setText("Storage do servidor em nuvem");
        } else {
            lblValorModeloDisco.setText(modeloDisco);
        }
    }

    private void monitorarSistema() {
        String sistemaOperacional = sistema.getSistemaOperacional();
        String arquiteturaSistemaOperacional = String.format("%d bits", sistema.getArquitetura());

        lblValorSistemaOperacional.setText(sistemaOperacional);
        lblValorArquitetura.setText(arquiteturaSistemaOperacional);
    }

    private void monitorarMemoria() {
        Double capacidadeTotalMemoria = (double) (memoria.getTotal()) / 1000000000;
        Integer capacidadeTotalMemoriaInt = capacidadeTotalMemoria.intValue();
        String tipoDeMemoria = "";

        if (physicalMemories.isEmpty()) {
            tipoDeMemoria = "Desconhecida";
        } else {
            tipoDeMemoria = physicalMemories.get(0).getMemoryType();
        }

        lblValorCapacidadeMemoria.setText(String.format("%d GB", capacidadeTotalMemoriaInt));
        lblValorTipoMemoria.setText(tipoDeMemoria);
    }

    public class AgendadorDeMonitoramento extends TimerTask {

        @Override
        public void run() {
            System.out.println("");
        }
    }

    private String armazenarData() {
        Timestamp dataDeAgora = new Timestamp(System.currentTimeMillis());
        return (new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(dataDeAgora));
    }

    private void notificarNoSlack() {
        if ((cpuEmUsoInt < 45 && porcentagemRamEmUsoInt < 45 && porcentagemDiscoEmUsoInt < 45)
                || (cpuEmUsoInt >= 45 && cpuEmUsoInt < 75 && porcentagemRamEmUsoInt < 45 && porcentagemDiscoEmUsoInt < 45)
                || (cpuEmUsoInt < 45 && porcentagemRamEmUsoInt >= 45 && porcentagemRamEmUsoInt < 75 && porcentagemDiscoEmUsoInt < 45)
                || (cpuEmUsoInt < 45 && porcentagemRamEmUsoInt < 45 && porcentagemDiscoEmUsoInt >= 45 && porcentagemRamEmUsoInt < 75)) {

        } else if ((cpuEmUsoInt >= 75 && porcentagemRamEmUsoInt < 45 && porcentagemDiscoEmUsoInt < 45)
                || (cpuEmUsoInt < 45 && porcentagemRamEmUsoInt >= 75 && porcentagemDiscoEmUsoInt < 45)
                || (cpuEmUsoInt < 45 && porcentagemRamEmUsoInt < 45 && porcentagemDiscoEmUsoInt >= 75)
                || (cpuEmUsoInt >= 45 && cpuEmUsoInt < 75 && porcentagemRamEmUsoInt >= 45 && porcentagemRamEmUsoInt < 75 && porcentagemDiscoEmUsoInt >= 45 && porcentagemDiscoEmUsoInt < 75)
                || (cpuEmUsoInt < 45 && porcentagemRamEmUsoInt >= 45 && porcentagemRamEmUsoInt < 75 && porcentagemDiscoEmUsoInt >= 45 && porcentagemDiscoEmUsoInt < 75)
                || (cpuEmUsoInt >= 45 && cpuEmUsoInt < 75 && porcentagemRamEmUsoInt < 45 && porcentagemDiscoEmUsoInt >= 45 && porcentagemDiscoEmUsoInt < 75)
                || (cpuEmUsoInt >= 45 && cpuEmUsoInt < 75 && porcentagemRamEmUsoInt >= 45 && porcentagemRamEmUsoInt < 75 && porcentagemDiscoEmUsoInt < 45)
                || (cpuEmUsoInt < 45 && porcentagemRamEmUsoInt >= 45 && porcentagemRamEmUsoInt < 75 && porcentagemDiscoEmUsoInt >= 75)
                || (cpuEmUsoInt >= 45 && cpuEmUsoInt < 75 && porcentagemRamEmUsoInt < 45 && porcentagemDiscoEmUsoInt >= 75)
                || (cpuEmUsoInt >= 45 && cpuEmUsoInt < 75 && porcentagemRamEmUsoInt >= 75 && porcentagemDiscoEmUsoInt < 45)
                || (cpuEmUsoInt < 45 && porcentagemRamEmUsoInt >= 75 && porcentagemDiscoEmUsoInt >= 45 && porcentagemDiscoEmUsoInt < 75)
                || (cpuEmUsoInt >= 75 && porcentagemRamEmUsoInt < 45 && porcentagemDiscoEmUsoInt >= 45 && porcentagemDiscoEmUsoInt < 75)
                || (cpuEmUsoInt >= 75 && porcentagemRamEmUsoInt >= 45 && porcentagemRamEmUsoInt < 75 && porcentagemDiscoEmUsoInt < 45)) {
            contadorModerado++;
            if (contadorModerado.equals(10) || contadorModerado.equals(20) || contadorModerado >= 30) {
                tempoDecorrido = Double.valueOf((System.currentTimeMillis() - tempoDeInicio));
                String tempo = "";
                if (tempoDecorrido >= 3600000.0) {
                    tempo = "hora(s)";
                    tempoDecorrido = (tempoDecorrido / (1000 * 60 * 60)) % 24;
                } else if (tempoDecorrido >= 60000.0) {
                    tempo = "minuto(s)";
                    tempoDecorrido = (tempoDecorrido / (1000 * 60)) % 60;
                } else if (tempoDecorrido >= 1000) {
                    tempo = "segundo(s)";
                    tempoDecorrido = (tempoDecorrido / (1000)) % 60;
                }
                json.put("text", String.format("*:smy: A máquina %s %s do(a) funcionário(a) %s já entrou em estado de atenção %d vezes hoje em um intervalo de %.1f %s!*"
                        + "\n _Dados do último registro:_"
                        + "\n CPU em uso: %d%%"
                        + "\n Disco em uso: %d%%"
                        + "\n RAM em uso: %d%%",
                        marcaPC,
                        modeloPC,
                        funcionarioUtilizando.getNomeFuncionario(),
                        contadorModerado,
                        tempoDecorrido,
                        tempo,
                        cpuEmUsoInt,
                        porcentagemDiscoEmUsoInt,
                        porcentagemRamEmUsoInt));

                try {
                    Slack.enviarMensagem(json);
                } catch (IOException | InterruptedException e) {
                }
            }
        } else {
            contadorCritico++;
            if (contadorCritico.equals(5) || contadorCritico.equals(10) || contadorCritico >= 15) {
                tempoDecorrido = Double.valueOf((System.currentTimeMillis() - tempoDeInicio));
                String tempo = "";
                if (tempoDecorrido >= 3600000.0) {
                    tempo = "hora(s)";
                    tempoDecorrido = (tempoDecorrido / (1000 * 60 * 60)) % 24;
                } else if (tempoDecorrido >= 60000.0) {
                    tempo = "minuto(s)";
                    tempoDecorrido = (tempoDecorrido / (1000 * 60)) % 60;
                } else if (tempoDecorrido >= 1000) {
                    tempo = "segundo(s)";
                    tempoDecorrido = (tempoDecorrido / (1000)) % 60;
                }
                json.put("text", String.format("*:smy: A máquina %s %s do(a) funcionário(a) %s já entrou em em estado crítico %d vezes hoje em um intervalo de %.1f %s!*"
                        + "\n _Dados do último registro:_"
                        + "\n CPU em uso: %d%%"
                        + "\n Disco em uso: %d%%"
                        + "\n RAM em uso: %d%%",
                        marcaPC,
                        modeloPC,
                        funcionarioUtilizando.getNomeFuncionario(),
                        contadorCritico,
                        tempoDecorrido,
                        tempo,
                        cpuEmUsoInt,
                        porcentagemDiscoEmUsoInt,
                        porcentagemRamEmUsoInt));

                try {
                    Slack.enviarMensagem(json);
                } catch (IOException | InterruptedException e) {
                }
            }
        }
    }

    private void monitorarEmNovaThread() {
        novaThread = new Thread(new AgendadorDeMonitoramento() {
            Integer contador = 0;

            @Override
            public void run() {
                while (monitorar) {
                    System.out.println("Capturando dados da máquina...");
                    System.out.println(String.format("Captura n°%d", ++contador));
                    monitorarPorcentagens();
                    monitorarSistema();
                    monitorarCpu();
                    monitorarDisco();
                    monitorarMemoria();
                    leituraHardwareDao.inserirMonitoramento(cpuEmUsoInt, porcentagemRamEmUsoInt, porcentagemDiscoEmUsoInt, armazenarData(), computador);

                    if (AprovacaoConexaoMysql.verificarSeDeveConectarAoMysql()) {
                        leituraHardwareDao.insertMetricasCpuMysql(cpuEmUsoFormatada, armazenarData());
                        leituraHardwareDao.insertMetricasRamMysql(ramEmUsoFormatada, armazenarData());
                        leituraHardwareDao.insertMetricasDiscoMysql(discoEmUsoFormatado, armazenarData());
                    }

                    notificarNoSlack();

                    try {
                        Thread.sleep(2000);
                    } catch (InterruptedException e) {
                        System.out.println(e);
                    }
                }
            }
        });

        novaThread.start();
    }

    public Thread getNovaThread() {
        return novaThread;
    }

    public void setNovaThread(Thread novaThread) {
        this.novaThread = novaThread;
    }

    public Boolean getMonitorar() {
        return monitorar;
    }

    public void setMonitorar(Boolean monitorar) {
        this.monitorar = monitorar;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel imgComputador;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTituloArquitetura;
    private javax.swing.JLabel lblTituloCPU;
    private javax.swing.JLabel lblTituloCapacidadeDisco;
    private javax.swing.JLabel lblTituloCapacidadeMemoria;
    private javax.swing.JLabel lblTituloDisco;
    private javax.swing.JLabel lblTituloInformacoesDaMaquina;
    private javax.swing.JLabel lblTituloMemoria;
    private javax.swing.JLabel lblTituloModeloDisco;
    private javax.swing.JLabel lblTituloNomeCPU;
    private javax.swing.JLabel lblTituloProcessosAtivos;
    private javax.swing.JLabel lblTituloSistema;
    private javax.swing.JLabel lblTituloSistemaOperacional;
    private javax.swing.JLabel lblTituloTipoMemoria;
    private javax.swing.JLabel lblValorArquitetura;
    private javax.swing.JLabel lblValorCapacidadeDisco;
    private javax.swing.JLabel lblValorCapacidadeMemoria;
    private javax.swing.JTextArea lblValorModeloDisco;
    private javax.swing.JTextArea lblValorNomeCPU;
    private javax.swing.JLabel lblValorProcessosAtivos;
    private javax.swing.JLabel lblValorSistemaOperacional;
    private javax.swing.JLabel lblValorTipoMemoria;
    private rojerusan.componentes.RSProgressCircle pgrCpu;
    private rojerusan.componentes.RSProgressCircle pgrDisco;
    private rojerusan.componentes.RSProgressCircle pgrMemoria;
    private javax.swing.JPanel pnlCpu;
    private javax.swing.JPanel pnlDisco;
    private javax.swing.JPanel pnlMemoria;
    private javax.swing.JPanel pnlMeuPc;
    private javax.swing.JPanel pnlSistema;
    // End of variables declaration//GEN-END:variables
}
